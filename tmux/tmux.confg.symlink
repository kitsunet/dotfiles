# # use C-a, since it's on the home row and easier to hit than C-b
set-option -g prefix C-a
unbind-key C-a
bind-key C-a send-prefix
set -g base-index 1

# Turn on mouse mode
set -g mouse on

#  Copy-paste integration
set-option -g default-command "reattach-to-user-namespace -l bash"

# Use vim keybindings in copy mode
setw -g mode-keys vi

# default window title colors
set-window-option -g window-status-fg white
set-window-option -g window-status-bg black
set-window-option -g window-status-attr dim


# active window title colors
set-window-option -g window-status-current-fg white
set-window-option -g window-status-current-bg default
set-window-option -g window-status-current-attr bright


# pane border
set-option -g pane-border-fg colour240 #base02
set-option -g pane-active-border-fg colour71 #base01
# message text
set-option -g message-bg colour235 #base02
set-option -g message-fg colour71 #green
# pane number display
set-option -g display-panes-active-colour colour33 #blue
set-option -g display-panes-colour colour71 #green

#clock
set-window-option -g clock-mode-colour colour64 #green
# status bar
set-option -g status-interval 2
set-option -g status on
set -g status-left-length 100
set -g status-right-length 451
set -g status-fg white
set -g status-bg colour234
set -g window-status-activity-attr bold
set -g message-attr bold
set-option -g status-justify "centre"
set -g window-status-format "#[fg=colour245,bg=colour234] #I:#W"
set -g window-status-current-format "#[fg=colour71,bg=colour234,noreverse,bold] [#I:#W]"
#source /usr/local/lib/python2.7/site-packages/powerline/bindings/tmux/powerline.conf
#source ~/.local/lib/python3.7/site-packages/powerline/bindings/tmux/powerline.conf
#set-option -g default-terminal "screen-256color"
#set-option -g status-left "#(~/.dotfiles/tmux-powerline/powerline.sh left)"
#set-option -g status-right "#(~/.dotfiles/tmux-powerline/powerline.sh right)"

# use different keys to split vertical and horizonal
bind \ split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# Setup 'v' to begin selection as in Vim
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
#
# Update default binding of `Enter` to also use copy-pipe
unbind -t vi-copy Enter
bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"
#
# # Bind ']' to use pbpaste
bind ] run "reattach-to-user-namespace pbpaste | tmux load-buffer - && tmux paste-buffer"

# New window with default path set to last path
 bind '"' split-window -c "#{pane_current_path}"
 bind % split-window -h -c "#{pane_current_path}"
 bind c new-window -c "#{pane_current_path}"

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# Default bash: fish
set -g default-command /usr/local/bin/fish
set -g default-shell /usr/local/bin/fish

# restore clear screen to ctrl-A
bind-key C-l send-keys "C-l"

bind-key v split-window -h
bind-key h split-window -v
bind-key k kill-pane

# pane resizing 
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2 
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2 

# Start copy mode when scrolling up and exit when scrolling down to bottom.
# The "#{mouse_any_flag}" check just sends scrolls to any program running that
# has mouse support (like vim).
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"  
bind -n WheelDownPane select-pane -t= \; send-keys -M 
